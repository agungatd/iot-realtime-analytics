services:
  # ZooKeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    # restart: unless-stopped
    networks:
      - streaming-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.2.2
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - streaming-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - streaming-network

  # # Flink JobManager
  # flink-jobmanager:
  #   image: apache/flink:1.20.1-scala_2.12 # Use an appropriate Flink version
  #   container_name: flink_jobmanager
  #   ports:
  #     - "8081:8081" # Flink UI
  #   command: jobmanager
  #   environment:
  #     - JOB_MANAGER_RPC_ADDRESS=jobmanager
  #   networks:
  #     - streaming-network

  # # Flink TaskManager
  # flink-taskmanager:
  #   image: apache/flink:1.20.1-scala_2.12
  #   container_name: flink_taskmanager
  #   depends_on:
  #     - jobmanager
  #     - kafka
  #   command: taskmanager
  #   environment:
  #     - JOB_MANAGER_RPC_ADDRESS=jobmanager
  #   networks:
  #     - streaming-network

  # Pinot Controller
  # pinot-controller:
  #   image: apachepinot/pinot:1.2.0
  #   command: "StartController -zkAddress zookeeper:2181"
  #   container_name: "pinot-controller"
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms1G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-controller.log"
  #   depends_on:
  #     - zookeeper
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:9000/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 10s
  #   restart: unless-stopped
  #   networks:
  #     - streaming-network

  # # Pinot Broker
  # pinot-broker:
  #   image: apachepinot/pinot:1.2.0
  #   command: "StartBroker -zkAddress zookeeper:2181"
  #   container_name: "pinot-broker"
  #   ports:
  #     - "8099:8099"
  #   depends_on:
  #     - zookeeper
  #     - pinot-controller
  #   environment:
  #     JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx4G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-broker.log"
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8099/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 10s
  #   restart: unless-stopped
  #   networks:
  #     - streaming-network

  # # Pinot Server
  # pinot-server:
  #   image: apachepinot/pinot:1.2.0
  #   command: "StartServer -zkAddress zookeeper:2181"
  #   container_name: "pinot-server"
  #   restart: unless-stopped
  #   environment:
  #     JAVA_OPTS: "-Dplugins.dir=/opt/pinot/plugins -Xms4G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xloggc:gc-pinot-server.log"
  #   ports:
  #     - "8098:8098"
  #   depends_on:
  #     - zookeeper
  #     - pinot-controller
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8097/health/readiness || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 10s
  #   networks:
  #     - streaming-network

  # # Data generator service
  # data-generator:
  #   build:
  #     context: ./data_generator
  #   container_name: data_generator
  #   depends_on:
  #     - kafka
  #   networks:
  #     - streaming-network

  # # Flink job launcher
  # flink-job-launcher:
  #   build:
  #     context: ./flink-job
  #   container_name: flink-job-launcher
  #   environment:
  #     - FLINK_JOBMANAGER_HOST=flink-jobmanager
  #     - FLINK_JOBMANAGER_PORT=8081
  #   depends_on:
  #     - flink-jobmanager
  #     - kafka
  #   networks:
  #     - streaming-network

networks:
  streaming-network:
    driver: bridge
